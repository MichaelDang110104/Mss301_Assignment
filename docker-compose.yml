version: '3.8'

services:
  service-discovery:
    build:
      context: .
      dockerfile: Dockerfile.service-discovery
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--quiet", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      spring-cloud:
        aliases:
          - service-discovery

  user-service:
    build:
      context: .
      dockerfile: Dockerfile.user-service
    depends_on:
      service-discovery:
        condition: service_healthy
    ports:
      - "8010:8010"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka
    networks:
      spring-cloud:
        aliases:
          - user-service
    volumes:
      - ~/.m2:/root/.m2

  car-service:
    build:
      context: .
      dockerfile: Dockerfile.car-service
    depends_on:
      service-discovery:
        condition: service_healthy
    ports:
      - "8020:8020"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka
    networks:
      spring-cloud:
        aliases:
          - car-service
    volumes:
      - ~/.m2:/root/.m2

  rental-service:
    build:
      context: .
      dockerfile: Dockerfile.rental-service
    depends_on:
      service-discovery:
        condition: service_healthy
    ports:
      - "8030:8030"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka
    networks:
      spring-cloud:
        aliases:
          - rental-service
    volumes:
      - ~/.m2:/root/.m2

  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.api-gateway
    depends_on:
      service-discovery:
        condition: service_healthy
    ports:
      - "8765:8765"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka
    networks:
      spring-cloud:
        aliases:
          - api-gateway
    volumes:
      - ~/.m2:/root/.m2

networks:
  spring-cloud:
    driver: bridge